/*
 * DeviceVME.cc
 *
 *  Created on: Oct 30, 2012
 *      Author: Thorsten Krautscheid
 */

#include "DeviceVME.h"

// Project
#include "InterfaceVME.h"



namespace vme {





DeviceVME::DeviceVME( int baseAddr, int usbNr )

	:	BASE_ADDR(baseAddr),
	 	m_interface(new vme::InterfaceVME(usbNr))

{} // end of DeviceVME::DeviceVME( int baseAddr, int usbNr )





DeviceVME::~DeviceVME() {

} // end of DeviceVME::~DeviceVME()



int DeviceVME::read32( int addrOffset, int addrMod ){

  //return m_interface.get()->read32( BASE_ADDR + addrOffset, addrMod );
  return m_interface.get()->read32( BASE_ADDR + addrOffset, addrMod );

} // end of void DeviceVME::read32( int addrOffset, int addrMod = 0x0D )





int DeviceVME::read16( int addrOffset, int addrMod ){

	return m_interface.get()->read16( BASE_ADDR + addrOffset, addrMod );

} // end of void DeviceVME::read16( int addrOffset, int addrMod )





void DeviceVME::write32( int data, int addrOffset, int addrMod ){

	m_interface.get()->write32( data, BASE_ADDR + addrOffset, addrMod );

} // end of int DeviceVME::write32( int data, int addrOffset, int addrMod = 0x0D )





void DeviceVME::write16( int data, int addrOffset, int addrMod ){

	m_interface.get()->write16( data, BASE_ADDR + addrOffset, addrMod );

} // end of int DeviceVME::write16( int data, int addrOffset, int addrMod )





std::vector<int> DeviceVME::readBlock32( int addrOffset, int nWords, int addrMod ){

	return m_interface.get()->readBlock32( BASE_ADDR + addrOffset, nWords, addrMod );
}





} // end of namespace vme
